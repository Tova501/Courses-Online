import { UntypedFormArray } from "@angular/forms";
import { from, isObservable, of } from "rxjs";
import { debounceTime, switchMap, take, tap } from "rxjs/operators";
export function persistControl(control, key, { debounceTime, manager, arrControlFactory, persistDisabledControls }) {
    const persistManager = manager || new LocalStorageManager();
    return restoreControl(control, key, persistManager, arrControlFactory).pipe(switchMap(() => persistValue$(control, key, {
        debounceTime: debounceTime || 250,
        manager: persistManager,
        persistDisabledControls
    })));
}
function persistValue$(control, key, options) {
    return control.valueChanges.pipe(
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    debounceTime(options.debounceTime), switchMap(value => 
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    wrapIntoObservable(options.manager.setValue(key, options.persistDisabledControls ? control.getRawValue() : value))));
}
export function restoreControl(control, key, manager, arrControlFactory) {
    return wrapIntoObservable(manager.getValue(key)).pipe(take(1), tap(value => {
        if (!value)
            return;
        if (arrControlFactory) {
            handleFormArrays(control, value, arrControlFactory);
        }
        control.patchValue(value, { emitEvent: false });
    }));
}
function handleFormArrays(control, formValue, arrControlFactory) {
    Object.keys(formValue).forEach(controlName => {
        const value = formValue[controlName];
        if (Array.isArray(value) && control.get(controlName) instanceof UntypedFormArray) {
            if (!arrControlFactory || (arrControlFactory && !(controlName in arrControlFactory))) {
                throw new Error(`Please provide arrControlFactory for ${controlName}`);
            }
            const current = control.get(controlName);
            const fc = arrControlFactory[controlName];
            clearFormArray(current);
            value.forEach((v, i) => current.insert(i, fc(v)));
        }
    });
}
export function clearFormArray(control) {
    while (control.length !== 0) {
        control.removeAt(0);
    }
}
export function wrapIntoObservable(value) {
    if (isObservable(value) || isPromise(value)) {
        return from(value);
    }
    return of(value);
}
function isPromise(value) {
    return typeof value?.then === 'function';
}
export class LocalStorageManager {
    setValue(key, data) {
        localStorage.setItem(key, JSON.stringify(data));
        return data;
    }
    getValue(key) {
        return JSON.parse(localStorage.getItem(key) || '{}');
    }
}
export class SessionStorageManager {
    setValue(key, data) {
        sessionStorage.setItem(key, JSON.stringify(data));
        return data;
    }
    getValue(key) {
        return JSON.parse(sessionStorage.getItem(key) || '{}');
    }
}
//# sourceMappingURL=data:application/json;base64,