import { UntypedFormGroup, } from '@angular/forms';
import { isObservable, Subject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import { controlDisabledWhile, controlEnabledWhile, controlErrorChanges$, controlStatus$, controlValueChanges$, disableControl, enableControl, hasErrorAnd, markAllDirty, mergeErrors, removeError, selectControlValue$, } from './core';
export class FormGroup extends UntypedFormGroup {
    constructor(controls, validatorOrOpts, asyncValidator) {
        super(controls, validatorOrOpts, asyncValidator);
        this.controls = controls;
        this.touchChanges = new Subject();
        this.dirtyChanges = new Subject();
        this.errorsSubject = new Subject();
        this.touch$ = this.touchChanges
            .asObservable()
            .pipe(distinctUntilChanged());
        this.dirty$ = this.dirtyChanges
            .asObservable()
            .pipe(distinctUntilChanged());
        this.value$ = controlValueChanges$(this);
        this.disabled$ = controlStatus$(this, 'disabled');
        this.enabled$ = controlStatus$(this, 'enabled');
        this.invalid$ = controlStatus$(this, 'invalid');
        this.valid$ = controlStatus$(this, 'valid');
        this.status$ = controlStatus$(this, 'status');
        this.errors$ = controlErrorChanges$(this, this.errorsSubject.asObservable());
    }
    select(mapFn) {
        return selectControlValue$(this, mapFn);
    }
    get(key) {
        return super.get(key);
    }
    setValue(valueOrObservable, options) {
        if (isObservable(valueOrObservable)) {
            return valueOrObservable.subscribe((value) => super.setValue(value, options));
        }
        super.setValue(valueOrObservable, options);
    }
    patchValue(valueOrObservable, options) {
        if (isObservable(valueOrObservable)) {
            return valueOrObservable.subscribe((value) => super.patchValue(value, options));
        }
        super.patchValue(valueOrObservable, options);
    }
    getRawValue() {
        return super.getRawValue();
    }
    markAsTouched(...opts) {
        super.markAsTouched(...opts);
        this.touchChanges.next(true);
    }
    markAsUntouched(...opts) {
        super.markAsUntouched(...opts);
        this.touchChanges.next(false);
    }
    markAsPristine(...opts) {
        super.markAsPristine(...opts);
        this.dirtyChanges.next(false);
    }
    markAsDirty(...opts) {
        super.markAsDirty(...opts);
        this.dirtyChanges.next(true);
    }
    markAllAsDirty() {
        markAllDirty(this);
    }
    setEnable(enable = true, opts) {
        enableControl(this, enable, opts);
    }
    setDisable(disable = true, opts) {
        disableControl(this, disable, opts);
    }
    disabledWhile(observable, options) {
        return controlDisabledWhile(this, observable, options);
    }
    enabledWhile(observable, options) {
        return controlEnabledWhile(this, observable, options);
    }
    reset(formState, options) {
        super.reset(formState, options);
    }
    setValidators(newValidators, options) {
        super.setValidators(newValidators);
        super.updateValueAndValidity(options);
    }
    setAsyncValidators(newValidator, options) {
        super.setAsyncValidators(newValidator);
        super.updateValueAndValidity(options);
    }
    getError(...params) {
        return super.getError(...params);
    }
    setErrors(...opts) {
        /**
         * @description
         * Use an elvis operator to avoid a throw when the control is used with an async validator
         * Which will be instantly resolved (like with `of(null)`)
         * In such case, Angular will call this method instantly before even instancing the properties causing the throw
         * Can be easily reproduced with a step-by-step debug once compiled when checking the stack trace of the constructor
         *
         * Issue: https://github.com/ngneat/reactive-forms/issues/91
         * Reproduction: https://codesandbox.io/embed/github/C0ZEN/ngneat-reactive-forms-error-issue-cs/tree/main/?autoresize=1&expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark
         */
        this.errorsSubject?.next(opts[0]);
        return super.setErrors(...opts);
    }
    mergeErrors(errors, opts) {
        this.setErrors(mergeErrors(this.errors, errors), opts);
    }
    removeError(key, opts) {
        this.setErrors(removeError(this.errors, key), opts);
    }
    hasErrorAndTouched(error, path) {
        return hasErrorAnd('touched', this, error, path);
    }
    hasErrorAndDirty(error, path) {
        return hasErrorAnd('dirty', this, error, path);
    }
}
//# sourceMappingURL=data:application/json;base64,