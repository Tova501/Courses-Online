import { defer, merge, of } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
export function selectControlValue$(control, mapFn) {
    return control.value$.pipe(map(mapFn), distinctUntilChanged());
}
export function controlValueChanges$(control) {
    return merge(defer(() => of(control.getRawValue())), control.valueChanges.pipe(map(() => control.getRawValue())));
}
export function controlStatus$(control, type) {
    return merge(defer(() => of(control[type])), control.statusChanges.pipe(map(() => control[type]), distinctUntilChanged()));
}
export function enableControl(control, enabled, opts) {
    if (enabled) {
        control.enable(opts);
    }
    else {
        control.disable(opts);
    }
}
export function disableControl(control, disabled, opts) {
    enableControl(control, !disabled, opts);
}
export function controlDisabledWhile(control, observable, opts) {
    return observable.subscribe((isDisabled) => disableControl(control, isDisabled, opts));
}
export function controlEnabledWhile(control, observable, opts) {
    return observable.subscribe((isEnabled) => enableControl(control, isEnabled, opts));
}
export function mergeErrors(existing, toAdd) {
    if (!existing && !toAdd) {
        return null;
    }
    return {
        ...existing,
        ...toAdd,
    };
}
export function removeError(errors, key) {
    if (!errors) {
        return null;
    }
    const updatedErrors = {
        ...errors,
    };
    delete updatedErrors[key];
    return Object.keys(updatedErrors).length > 0 ? updatedErrors : null;
}
export function hasErrorAnd(and, control, error, path) {
    const hasError = control.hasError(error, !path || path.length === 0 ? undefined : path);
    return hasError && control[and];
}
export function controlErrorChanges$(control, errors$) {
    return merge(defer(() => of(control.errors)), errors$, control.valueChanges.pipe(map(() => control.errors), distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b))));
}
export function markAllDirty(control) {
    control.markAsDirty({ onlySelf: true });
    control._forEachChild((control) => control.markAllAsDirty?.() || control.markAsDirty({ onlySelf: true }));
}
//# sourceMappingURL=data:application/json;base64,