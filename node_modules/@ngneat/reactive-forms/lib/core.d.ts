import { AbstractControl, ValidationErrors } from '@angular/forms';
import { Observable, Subscription } from 'rxjs';
export declare function selectControlValue$<T, R>(control: any, mapFn: (state: T) => R): Observable<R>;
export declare function controlValueChanges$<T>(control: AbstractControl & {
    getRawValue: () => T;
}): Observable<T>;
export declare type ControlState = 'VALID' | 'INVALID' | 'PENDING' | 'DISABLED';
export declare function controlStatus$<K extends 'disabled' | 'enabled' | 'invalid' | 'valid' | 'status'>(control: AbstractControl, type: K): Observable<K extends 'status' ? ControlState : boolean>;
export declare function enableControl(control: AbstractControl, enabled: boolean, opts?: any): void;
export declare function disableControl(control: AbstractControl, disabled: boolean, opts?: any): void;
export declare function controlDisabledWhile(control: AbstractControl, observable: Observable<boolean>, opts?: any): Subscription;
export declare function controlEnabledWhile(control: AbstractControl, observable: Observable<boolean>, opts?: any): Subscription;
export declare function mergeErrors(existing: ValidationErrors | null, toAdd: ValidationErrors | null): {
    [x: string]: any;
} | null;
export declare function removeError(errors: ValidationErrors | null, key: string): {
    [x: string]: any;
} | null;
export declare function hasErrorAnd(and: 'touched' | 'dirty', control: AbstractControl, error: string, path?: Parameters<AbstractControl['hasError']>[1]): boolean;
export declare function controlErrorChanges$(control: AbstractControl, errors$: Observable<ValidationErrors | null>): Observable<ValidationErrors | null>;
export declare function markAllDirty(control: AbstractControl): void;
